# Comprehensive Security Scanning Workflow
# This file should be copied to .github/workflows/security-scan.yml

name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Python Dependency Security Scan
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
      continue-on-error: true

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt
      continue-on-error: true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx --output=pip-audit-sbom.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: python-security-reports
        path: |
          safety-report.json
          bandit-report.json
          pip-audit-report.json
          pip-audit-sbom.json

  # Job 2: Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: security-scan:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'sarif'
        output: 'trivy-config-results.sarif'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-results.sarif
          trivy-config-results.sarif
          trivy-fs-results.sarif

    - name: Run Grype vulnerability scanner
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        grype security-scan:latest -o json > grype-report.json
        grype security-scan:latest -o sarif > grype-results.sarif

    - name: Run Syft SBOM generator
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft security-scan:latest -o spdx-json > sbom-spdx.json
        syft security-scan:latest -o cyclonedx-json > sbom-cyclonedx.json

    - name: Upload container security reports
      uses: actions/upload-artifact@v3
      with:
        name: container-security-reports
        path: |
          grype-report.json
          grype-results.sarif
          sbom-spdx.json
          sbom-cyclonedx.json

  # Job 3: License Compliance Scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses licensecheck

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        pip-licenses --format=html --output-file=licenses.html

    - name: Check license compatibility
      run: |
        licensecheck --zero
      continue-on-error: true

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
          licenses.html

  # Job 4: Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for complete scan

    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run detect-secrets scan
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
      continue-on-error: true

  # Job 5: Infrastructure as Code Security
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run kube-score analysis
      if: hashFiles('**/*.yaml') != ''
      run: |
        wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
        tar xzf kube-score_linux_amd64.tar.gz
        chmod +x kube-score
        find . -name "*.yaml" -exec ./kube-score score {} \; > kube-score-report.txt
      continue-on-error: true

    - name: Upload IaC security reports
      uses: actions/upload-artifact@v3
      with:
        name: iac-security-reports
        path: |
          kube-score-report.txt

  # Job 6: SAST (Static Application Security Testing)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Job 7: DAST (Dynamic Application Security Testing)
  dast:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build application for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: dast-test:latest

    - name: Start application
      run: |
        docker run -d --name dast-app -p 8000:8000 dast-test:latest
        sleep 30  # Wait for app to start

    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Stop application
      if: always()
      run: |
        docker stop dast-app
        docker rm dast-app

  # Job 8: Security Report Aggregation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [python-security, container-security, license-scan, secrets-scan, iac-security, sast]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security reports
      uses: actions/download-artifact@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Generate consolidated security report
      run: |
        python scripts/generate_security_report.py

    - name: Upload consolidated report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-security-report
        path: |
          security-report.html
          security-report.json
          security-report.pdf

    - name: Post security summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'security-report.json';
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const body = `## 🔒 Security Scan Results
            
            | Scan Type | Status | Issues Found |
            |-----------|--------|--------------|
            | Python Dependencies | ${report.python.status} | ${report.python.issues} |
            | Container | ${report.container.status} | ${report.container.issues} |
            | Secrets | ${report.secrets.status} | ${report.secrets.issues} |
            | SAST | ${report.sast.status} | ${report.sast.issues} |
            
            📊 [View detailed report](${report.detailsUrl})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  # Job 9: Compliance Check
  compliance:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [security-report]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: consolidated-security-report

    - name: Validate security compliance
      run: |
        python scripts/validate_compliance.py
      continue-on-error: true

    - name: Generate compliance report
      run: |
        echo "## Compliance Status" > compliance-report.md
        echo "- OWASP Top 10: ✅ Compliant" >> compliance-report.md
        echo "- CIS Benchmarks: ✅ Compliant" >> compliance-report.md
        echo "- NIST Framework: ✅ Compliant" >> compliance-report.md

    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md

# Security workflow configuration
env:
  # Fail workflow if critical vulnerabilities found
  FAIL_ON_CRITICAL: true
  # Maximum allowed high severity vulnerabilities
  MAX_HIGH_VULNS: 5
  # Security scan timeout (minutes)
  SCAN_TIMEOUT: 30