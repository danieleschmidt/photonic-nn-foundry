# Comprehensive CI pipeline for photonic-nn-foundry
# Copy this file to .github/workflows/ci.yml

name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_NO_CACHE_DIR: 1
  FORCE_COLOR: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight checks
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=audit-report.json || true
          pip-audit

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            audit-report.json

  # Multi-platform testing matrix
  test:
    name: Test Suite
    needs: [pre-commit, security-scan]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y verilator iverilog

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install verilator icarus-verilog

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .[dev,test]

      - name: Verify installation
        run: |
          python -c "import photonic_foundry; print('Package imported successfully')"
          photonic-foundry --version

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=src/photonic_foundry \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=test-results-unit.xml

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v \
            --junit-xml=test-results-integration.xml

      - name: Run end-to-end tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          pytest tests/e2e/ -v \
            --junit-xml=test-results-e2e.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results-*.xml
            coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance benchmarks
  performance:
    name: Performance Benchmarks
    if: github.event.inputs.run_performance_tests == 'true' || github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .[dev,test]

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v \
            --benchmark-only \
            --benchmark-sort=mean \
            --benchmark-json=benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

      - name: Performance regression check
        run: |
          python scripts/check_performance_regression.py benchmark-results.json

  # Container builds and tests
  container:
    name: Container Build & Test
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multi-arch
          target: development
          tags: photonic-foundry:dev
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multi-arch
          target: production
          tags: photonic-foundry:prod
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container health
        run: |
          # Test development container
          docker run --rm --health-timeout=30s photonic-foundry:dev /usr/local/bin/healthcheck.sh
          
          # Test production container
          docker run --rm --health-timeout=30s photonic-foundry:prod /usr/local/bin/healthcheck.sh

      - name: Run container tests
        run: |
          docker run --rm photonic-foundry:dev pytest tests/unit/ -v

      - name: Security scan containers
        run: |
          # Install trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan images
          trivy image --exit-code 1 --severity HIGH,CRITICAL photonic-foundry:dev
          trivy image --exit-code 1 --severity HIGH,CRITICAL photonic-foundry:prod

  # Documentation build
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .[docs]

      - name: Build documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html -W --keep-going

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Results aggregation
  ci-success:
    name: CI Success
    needs: [pre-commit, security-scan, test, performance, container, docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.pre-commit.result }}" != "success" ]]; then
            echo "Pre-commit checks failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.container.result }}" != "success" ]]; then
            echo "Container build failed"
            exit 1
          fi
          if [[ "${{ needs.docs.result }}" != "success" ]]; then
            echo "Documentation build failed"
            exit 1
          fi
          
          echo "All CI checks passed successfully!"

      - name: Update status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ CI pipeline completed successfully"
          else
            echo "❌ CI pipeline failed"
            exit 1
          fi