name: Autonomous Value Discovery

on:
  push:
    branches: [main]
  schedule:
    # Run every 6 hours for continuous discovery
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_execution:
        description: 'Force autonomous execution'
        required: false
        default: 'false'

jobs:
  value-discovery:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    
    - name: Run Value Discovery
      id: discovery
      run: |
        python3 .terragon/value-discovery.py
        echo "discovery_complete=true" >> $GITHUB_OUTPUT
    
    - name: Check for High-Value Items
      id: check_items
      run: |
        # Parse metrics to check for high-value autonomous items
        if [ -f .terragon/value-metrics.json ]; then
          # Check if there are items with score > 25 that can be executed autonomously
          HIGH_VALUE=$(python3 -c "
          import json
          try:
              with open('.terragon/value-metrics.json', 'r') as f:
                  data = json.load(f)
              items = data.get('discovered_items', [])
              autonomous_types = {'test_debt', 'dependency_update', 'technical_debt'}
              high_value = any(
                  item.get('composite_score', 0) > 25 and
                  item.get('type') in autonomous_types and
                  item.get('estimatedEffort', 0) <= 4
                  for item in items
              )
              print('true' if high_value else 'false')
          except:
              print('false')
          ")
          echo "has_high_value_items=$HIGH_VALUE" >> $GITHUB_OUTPUT
        else
          echo "has_high_value_items=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Execute Autonomous Work
      if: steps.check_items.outputs.has_high_value_items == 'true' || github.event.inputs.force_execution == 'true'
      run: |
        # Configure git for autonomous commits
        git config --local user.email "terragon@noreply.github.com"
        git config --local user.name "Terragon Autonomous SDLC"
        
        # Run autonomous executor
        python3 .terragon/autonomous-executor.py
    
    - name: Update Backlog
      if: always()
      run: |
        # Update BACKLOG.md with latest discoveries
        python3 -c "
        import json
        from datetime import datetime
        
        try:
            with open('.terragon/value-metrics.json', 'r') as f:
                data = json.load(f)
            
            items = data.get('discovered_items', [])
            items_sorted = sorted(items, key=lambda x: x.get('composite_score', 0), reverse=True)
            
            # Update BACKLOG.md
            backlog_content = f'''# ðŸ“Š Autonomous Value Backlog

**Last Updated**: {datetime.utcnow().isoformat()}Z  
**Repository**: photonic-nn-foundry  
**Maturity Level**: MATURING (75%)  
**Total Items**: {len(items)}

## ðŸŽ¯ Next Best Value Item

'''
            
            if items_sorted:
                top_item = items_sorted[0]
                backlog_content += f'''**[{top_item.get('id', 'N/A')}] {top_item.get('title', 'No title')}**
- **Composite Score**: {top_item.get('composite_score', 0)}
- **Type**: {top_item.get('type', 'unknown')}
- **Estimated Effort**: {top_item.get('estimatedEffort', 0)} hours
- **Priority**: {top_item.get('priority', 'medium')}
- **Impact**: {top_item.get('impact', 'No impact description')}

'''
            
            backlog_content += '''## ðŸ“‹ Top Priority Items

| Rank | ID | Title | Score | Type | Est. Hours |
|------|----|----- |-------|------|------------|
'''
            
            for i, item in enumerate(items_sorted[:10], 1):
                title_short = item.get('title', 'No title')[:50] + ('...' if len(item.get('title', '')) > 50 else '')
                backlog_content += f'''| {i} | {item.get('id', 'N/A')} | {title_short} | {item.get('composite_score', 0)} | {item.get('type', 'unknown')} | {item.get('estimatedEffort', 0)} |
'''
            
            backlog_content += f'''

## ðŸ“ˆ Discovery Metrics
- **Items Discovered**: {len(items)}
- **Average Score**: {sum(item.get('composite_score', 0) for item in items) / max(len(items), 1):.1f}
- **High Priority Count**: {len([item for item in items if item.get('priority') == 'high'])}

---
**ðŸ¤– Auto-generated by Terragon Autonomous SDLC**
'''
            
            with open('BACKLOG.md', 'w') as f:
                f.write(backlog_content)
            
            print('BACKLOG.md updated successfully')
        except Exception as e:
            print(f'Error updating backlog: {e}')
        "
    
    - name: Commit Updated Backlog
      if: always()
      run: |
        git add BACKLOG.md .terragon/
        if ! git diff --cached --quiet; then
          git commit -m "chore: update autonomous value discovery backlog

ðŸ¤– Generated with Terragon Autonomous SDLC

Co-Authored-By: Terragon <noreply@terragonlabs.com>"
          git push
        else
          echo "No changes to commit"
        fi
    
    outputs:
      discovery_complete: ${{ steps.discovery.outputs.discovery_complete }}
      has_high_value_items: ${{ steps.check_items.outputs.has_high_value_items }}

  notify-results:
    needs: value-discovery
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## ðŸŽ¯ Autonomous Value Discovery Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Discovery Complete**: ${{ needs.value-discovery.outputs.discovery_complete }}" >> $GITHUB_STEP_SUMMARY
        echo "- **High-Value Items Found**: ${{ needs.value-discovery.outputs.has_high_value_items }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the updated [BACKLOG.md](./BACKLOG.md) for discovered value items." >> $GITHUB_STEP_SUMMARY