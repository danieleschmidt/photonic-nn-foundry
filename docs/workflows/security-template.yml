# Security Scanning Workflow Template
# Save this as .github/workflows/security.yml

name: Security Scanning

on:
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC
  pull_request:
    paths: 
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'src/**'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-reports
        path: |
          safety-report.json
          pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -ll -f txt
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t photonic-foundry:security-scan .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'photonic-foundry:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for secret scanning
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck
        pip install -r requirements.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain
        licensecheck --zero
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install SBOM tools
      run: |
        python -m pip install --upgrade pip
        pip install cyclonedx-bom pip-requirements-parser
        pip install -r requirements.txt
    
    - name: Generate SBOM
      run: |
        cyclonedx-py --output-format json --output-file sbom.json
        cyclonedx-py --output-format xml --output-file sbom.xml
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          sbom.json
          sbom.xml

  security-report:
    name: Aggregate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, codeql-analysis, container-security, secrets-scan, license-compliance, sbom-generation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Code Security: ${{ needs.code-security-scan.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
        echo "- Secrets Detection: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
        echo "- SBOM Generation: ${{ needs.sbom-generation.result }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "## Artifacts Generated" >> security-summary.md
        echo "Check the Actions artifacts for detailed reports." >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results\n\n${summary}`
          });