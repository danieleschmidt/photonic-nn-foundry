# Default values for quantum-photonic-foundry Helm chart

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: photonic-foundry
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# Quantum Planner Service
quantumPlanner:
  enabled: true
  replicaCount: 3
  
  image:
    repository: photonic-foundry
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    annotations: {}
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: quantum-planner.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      httpGet:
        path: /health
        port: 8080
    readiness:
      enabled: true
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 3
      httpGet:
        path: /ready
        port: 8080

# Quantum Optimizer
quantumOptimizer:
  enabled: true
  replicaCount: 2
  
  resources:
    limits:
      cpu: 4000m
      memory: 8Gi
      nvidia.com/gpu: 1
    requests:
      cpu: 2000m
      memory: 4Gi
  
  nodeSelector:
    quantum-compute: "true"
  
  tolerations:
    - key: "quantum-workload"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  
  env:
    optimizationStrategy: "hybrid_quantum_classical"
    maxWorkers: "8"
    gpuEnabled: "true"

# Quantum Security Manager
quantumSecurity:
  enabled: true
  replicaCount: 2
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 2000
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  env:
    securityLevel: "quantum_resistant"
    auditLogging: "true"
    adversarialProtection: "true"

# Quantum Resilience (CronJob)
quantumResilience:
  enabled: true
  schedule: "*/15 * * * *"  # Every 15 minutes
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  env:
    circuitMonitoring: "enabled"
    faultPrediction: "enabled"

# Configuration
config:
  quantum:
    planner:
      maxConcurrentTasks: 16
      thermalLimit: 75.0
      autoScaleEnabled: true
      minNodes: 2
      maxNodes: 16
    
    optimization:
      strategy: "hybrid_quantum_classical"
      maxIterations: 1000
      convergenceThreshold: 1e-6
      parallelEvaluations: true
      useGpuAcceleration: true
    
    security:
      level: "enhanced"
      minEntropyBits: 256
      requireAuthentication: true
      enableAuditLogging: true
      quantumKeyDistribution: false
      adversarialProtection: true
      sideChannelProtection: true
    
    resilience:
      enableHealthMonitoring: true
      enableFaultPrediction: true
      enableAutoRecovery: true
      maxRecoveryAttempts: 3
      healthCheckInterval: 300  # 5 minutes
    
    performance:
      targetLatencyPs: 100
      targetEnergyPj: 10
      targetThroughputGops: 1000
      enablePerformanceMonitoring: true

# Persistence
persistence:
  optimization:
    enabled: true
    storageClass: "fast-ssd"
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    annotations: {}
  
  securityLogs:
    enabled: true
    storageClass: "standard"
    accessModes:
      - ReadWriteOnce
    size: 5Gi
    annotations: {}

# Security
secrets:
  quantumCryptoKeys:
    enabled: true
    data:
      master.key: "UXVhbnR1bUVuaGFuY2VkS2V5Rm9yUGhvdG9uaWNGb3VuZHJ5"
      signing.key: "UXVhbnR1bVNpZ25pbmdLZXlGb3JBdXRoZW50aWNhdGlvbg=="
      encryption.key: "UXVhbnR1bUVuY3J5cHRpb25LZXlGb3JEYXRhUHJvdGVjdGlvbg=="

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: quantum-photonic-foundry
      - podSelector:
          matchLabels:
            tier: frontend
  egress:
    enabled: true
    to:
      - namespaceSelector:
          matchLabels:
            name: quantum-photonic-foundry
    ports:
      - protocol: TCP
        port: 5432  # PostgreSQL
      - protocol: TCP
        port: 6379  # Redis
      - protocol: TCP
        port: 443   # HTTPS outbound
      - protocol: TCP
        port: 53    # DNS
      - protocol: UDP
        port: 53    # DNS

# Monitoring
monitoring:
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}
  
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    rules: []

# Logging
logging:
  level: INFO
  format: json
  outputs:
    - console
    - file
  
  fileOutput:
    path: /app/logs/quantum-foundry.log
    maxSize: 100MB
    maxBackups: 5
    maxAge: 30

# Resource quotas
resourceQuota:
  enabled: false
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    persistentvolumeclaims: "10"

# Pod Security Standards
podSecurityStandards:
  enforce: "restricted"
  audit: "restricted"
  warn: "restricted"

# Extra objects (for custom resources)
extraObjects: []