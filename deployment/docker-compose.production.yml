version: '3.8'

services:
  photonic-api:
    build:
      context: ..
      dockerfile: Dockerfile.multi-arch
      args:
        - BUILD_ENV=production
    image: photonic-foundry:production
    container_name: photonic-api-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - MAX_REQUEST_SIZE=50
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
      - CIRCUIT_DB_PATH=/app/data/circuits.db
      - CIRCUIT_CACHE_DIR=/app/cache/circuits
      - CIRCUIT_CACHE_ENABLED=true
      - MAX_CACHED_CIRCUITS=5000
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - ENABLE_API_DOCS=false
      - CORS_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
    volumes:
      - photonic_data:/app/data
      - photonic_cache:/app/cache
      - photonic_logs:/app/logs
    networks:
      - photonic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  photonic-worker:
    build:
      context: ..
      dockerfile: Dockerfile.multi-arch
      args:
        - BUILD_ENV=production
        - WORKER_MODE=true
    image: photonic-foundry:production
    container_name: photonic-worker-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - WORKER_MODE=true
      - REDIS_URL=redis://redis:6379/0
      - CIRCUIT_DB_PATH=/app/data/circuits.db
      - CIRCUIT_CACHE_DIR=/app/cache/circuits
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    volumes:
      - photonic_data:/app/data
      - photonic_cache:/app/cache
      - photonic_logs:/app/logs
    networks:
      - photonic_network
    depends_on:
      - redis
      - photonic-api
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: photonic-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - photonic_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: prom/prometheus:latest
    container_name: photonic-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - photonic_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    container_name: photonic-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - photonic_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: photonic-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - photonic_logs:/var/log/nginx
    networks:
      - photonic_network
    depends_on:
      - photonic-api
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true

volumes:
  photonic_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/photonic-foundry/data
  photonic_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/photonic-foundry/cache
  photonic_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/photonic-foundry/logs
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  photonic_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16